swagger: '2.0'
info:
  description: Doraku Backend API
  version: 1.0.0
  title: Doraku
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /api/v1
schemes:
  - http
paths:
  /hobby/recommended:
    get:
      tags:
        - hobby
      summary: get recommend hobby
      description: get recommend hobby
      parameters:
        - name: outdoor
          in: query
          schema:
            type: bool
        - name: alone
          in: query
          schema:
            type: bool
        - name: active
          in: query
          schema:
            type: bool
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/HobbyInfo'
  /hobby/today:
    get:
      tags:
        - hobby
      summary: get today hobby
      description: get today hobby
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/HobbyInfo'
  /login:
    post:
      tags:
        - user
      summary: login to doraku
      description: login to doraku
      produces:
        - application/json
      parameters:
        - name: info
          schema:
            type: object
            properties:
              name:
                type: string
              password:
                type: string
          in: body
          description: login info
          required: true
      responses:
        '200':
          description: ok
          schema:
            type: object
            properties:
              token:
                type: string
        '401':
          description: failed to authorize
  /user:
    post:
      tags:
      - user
      summary: create user
      description: create user
      produces:
      - application/json
      parameters:
      - name: info
        in: body
        description: user data
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            password:
              type: string
      responses:
        202:
          description: "operation accepted"
          schema:
            type: object
            properties:
              token:
                type: string
        400:
          description: "Invalid parameters supplied"
  /validate:
    post:
      tags:
      - user
      summary: validate temporary token
      description: validate temporary token
      produces:
      - application/json
      parameters:
      - name: info
        in: body
        description: token for validation
        required: true
        schema:
          type: object
          properties:
            token:
              type: string
      responses:
        201:
          description: 'successful operation'
        400:
          description: 'Bad Request'
  /user/{username}:
    get:
      tags:
      - user
      summary: "Get user by user name"
      description: "Get user by user name"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: Delete user
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        204:
          description: "successful operation"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /user/{username}/myhobby/{hobbyid}:
    post:
      tags:
      - "user"
      summary: "Add myhobby to user"
      description: Add myhobby to user
      parameters:
      - name: "username"
        in: "path"
        description: "user name"
        required: true
        type: "string"
      - name: "hobbyid"
        in: "path"
        description: "hobby id that adding to user"
        required: true
        type: "string"
      responses:
        201:
          description: "successful operation"
        400:
          description: "Invalid path parameters are supplied"
        404:
          description: "User or Hobby not found"
    delete:
      tags:
      - "user"
      summary: "Delete myhobby from user"
      description: Delete myhobby from user
      parameters:
      - name: "username"
        in: "path"
        description: "user name"
        required: true
        type: "string"
      - name: "hobbyid"
        in: "path"
        description: "hobby id that deleting to user"
        required: true
        type: "string"
      responses:
        204:
          description: "successful operation"
        400:
          description: "Invalid path parameters are supplied"
        404:
          description: "User or Hobby not found"
definitions:
  HobbyInfo:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  User:
    type: object
    properties:
      name:
        type: string
      password:
        type: string
      myhobbies:
        type: array
        items:
          type: integer