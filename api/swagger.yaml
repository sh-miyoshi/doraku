swagger: '2.0'
info:
  description: Doraku Backend API
  version: 1.0.0
  title: Doraku
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /api/v1
schemes:
  - http
paths:
  /hobby/all:
    get:
      tags:
        - hobby
      summary: get all hobby names
      description: get list of all hobby name
      produces:
        - application/json
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
  /hobby/today:
    get:
      tags:
        - hobby
      summary: get today's hobby
      description: get today's hobby
      produces:
        - application/json
      responses:
        '200':
          description: ok
          schema:
            type: string
  /hobby/recommended:
    get:
      tags:
        - hobby
      summary: get recommended hobby
      description: get recommended hobby
      parameters:
        - name: outdoor
          in: query
          type: string
        - name: alone
          in: query
          type: string
        - name: active
          in: query
          type: string
      responses:
        '200':
          description: ok
          schema:
            type: string
  '/hobby/details/{id}':
    get:
      tags:
        - hobby
      summary: get details of the hobby
      description: get details of the hobby
      produces:
        - application/json
      parameters:
        - name: id
          type: integer
          in: path
          description: id of the hobby
          required: true
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/Hobby'
        '404':
          description: No such hobby
  /login:
    post:
      tags:
        - user
      summary: login to doraku
      description: login to doraku
      produces:
        - application/json
      parameters:
        - name: info
          schema:
            $ref: '#/definitions/LoginRequest'
          in: body
          description: login info
          required: true
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/LoginRespose'
        '400':
          description: failed to authorize
  /user/{username}:
    post:
      tags:
      - user
      summary: create user
      description: create user
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: user name you want to create
        required: true
        type: string
      - name: info
        in: body
        description: user data
        required: true
        schema:
          $ref: '#/definitions/UserCreateRequest'
      responses:
        201:
          description: "successful operation"
        400:
          description: "Invalid parameters supplied"
    get:
      tags:
      - user
      summary: "Get user by user name"
      description: "Get user by user name"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: Delete user
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        204:
          description: "successful operation"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
definitions:
  Hobby:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      nameEN:
        type: string
      description:
        type: string
      descriptionFrom:
        type: string
      descriptionURL:
        type: string
      groupNo:
        type: integer
      groupInfo:
        type: string
  LoginRequest:
    type: object
    properties:
      name:
        type: string
      password:
        type: string
  LoginRespose:
    type: object
    properties:
      token:
        type: string
  UserCreateRequest:
    type: object
    properties:
      name:
        type: string
      password:
        type: string
  User:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
